#include "DBoW3/DBoW3.h"
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <iostream>
#include <vector>
#include <string>

using namespace cv;
using namespace std;

/*------根据已有的字典，计算相似性评分--------*/
int main(int argc, char **argv) {
    // read the images and database
    cout << "reading database" << endl;
    // DBoW3::Vocabulary vocab("./build/vocabulary.yml.gz"); // 读取字典
    DBoW3::Vocabulary vocab("./data/vocab_larger.yml.gz"); // use large vocab if you want
    if (vocab.empty()) { // 检查字典的读取
        cerr << "Vocabulary does not exist." << endl;
        return 1;
    }
    cout << "reading images ... " << endl; 
    vector<Mat> images;
    for (int i = 0; i < 10; i++) {
        string path = "./data/" + to_string(i + 1) + ".png"; // 读取图片数据
        images.push_back( imread(path) );
    }

    // Detect ORB features
    cout << "detecting ORB features ... " << endl;
    Ptr<Feature2D> detector = ORB::create(); // 创建ORB特征提取器
    vector<Mat> descriptors;
    for (Mat &image:images) {
        vector<KeyPoint> keypoints;
        Mat descriptor;
        detector->detectAndCompute( image, Mat(), keypoints, descriptor ); // opencv自带的提取关键点和描述符
        descriptors.push_back(descriptor);
    }

    // NOTE: in this case we are comparing images with a vocabulary generated by themselves, this may lead to overfit. 可能过拟合，因为图像和字典都是由相同图像集生成。实际应用中，会使用独立的图像集训练字典，并比较未见过的图像。
    // we can compare the images directly or we can compare one image to a database images:
    cout << "comparing images with images " << endl;
    for (int i = 0; i < images.size(); i++) {
        DBoW3::BowVector v1;
        vocab.transform(descriptors[i], v1); // .transform() 将图像的特征描述符(descriptors)转换为词袋向量(BowVector， v1)。descriptors[i]是第i幅图像的所有描述符，不是某一个描述符。
        for (int j = i; j < images.size(); j++) {
            DBoW3::BowVector v2;
            vocab.transform(descriptors[j], v2);
            double score = vocab.score(v1, v2); // .score() 计算两个词袋间的相似性评分。具体评分方法需要查看文档。
            cout << "image " << i << " vs image " << j << " : " << score << endl;
        }
        cout << endl;
    }

    // or with database
    cout << "comparing images with database " << endl;
    DBoW3::Database db(vocab, false, 0); 
    // BowVector 是单幅图像的词袋向量。Vocabulary 为多幅图像构建的字典。 Database 为管理 BowVector 词袋向量的数据库。
    // DBoW3::Database 构造函数的输入参数：vocab 为一个 DBoW3::Vocabulary 字典对象；第二个bool值如果为true则采用逆索引(一种数据结构)查询；第三个整数(默认0)设置逆索引的阈值。
    for (int i = 0; i < descriptors.size(); i++ )
        db.add( descriptors[i] ); // .add() 将给定描述符添加到数据库中，描述符被转换为词袋向量并存储在数据库中。（如果使用了逆索引并满足阈值要求，还会将图像添加到逆索引中）
    cout << "database info: " << db << endl; // DBoW3::Database 类可能重载了 << 运算符，使输出该对象的简要信息。
    for (int i = 0; i < descriptors.size(); i++ ) {
        DBoW3::QueryResults ret; // QueryResults 类用于存储查询操作的结果。包含与查询描述符最相似的数据库条目的信息。
        db.query( descriptors[i], ret, 4);  // max result = 4. 
        // .query() 在数据库中查询与给定描述符最相似的条目。输入参数：descriptors[i]要查询的描述符；ret为用于存储查询结果的 DBoW3::QueryResults 对象；4为返回的与查询符最相似的数据库条目的最大数量。
        cout << "searching for image " << i << " returns " << endl << ret << endl << endl;
    }
    cout << "done. " << endl;
}